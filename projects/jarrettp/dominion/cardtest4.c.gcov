        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "steward"
        -:   24:
        1:   25:int main() {
        1:   26:    int newCards = 0;
        1:   27:    int discarded = 1;
        1:   28:    int xtraCoins = 0;
        1:   29:    int shuffledCards = 0;
        -:   30:
        -:   31:    int i, j, m;
        1:   32:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   33:    int remove1, remove2;
        1:   34:    int seed = 1000;
        1:   35:    int numPlayers = 2;
        1:   36:    int thisPlayer = 0;
        -:   37:	struct gameState G, testG;
        1:   38:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   39:			sea_hag, tribute, smithy, council_room};
        -:   40:
        -:   41:	// initialize a game state and player cards
        1:   42:	initializeGame(numPlayers, k, seed, &G);
        -:   43:
        1:   44:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   45:
        -:   46:	// ----------- TEST 1: choice1 = 1 = +2 cards --------------
        1:   47:	printf("TEST 1: choice1 = 1 = +2 cards\n");
        -:   48:
        -:   49:	// copy the game state to a test case
        1:   50:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   51:	choice1 = 1;
        1:   52:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   53:
        1:   54:	newCards = 2;
        1:   55:	xtraCoins = 0;
        1:   56:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   57:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   58:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   59:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   60:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   61:	assert(testG.coins == G.coins + xtraCoins);
        -:   62:
        -:   63:	// ----------- TEST 2: choice1 = 2 = +2 coins --------------
        1:   64:	printf("TEST 2: choice1 = 2 = +2 coins\n");
        -:   65:
        -:   66:	// copy the game state to a test case
        1:   67:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   68:	choice1 = 2;
        1:   69:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   70:
        1:   71:	newCards = 0;
        1:   72:	xtraCoins = 2;
        1:   73:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   74:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   75:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   76:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   77:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   78:	assert(testG.coins == G.coins + xtraCoins);
        -:   79:
        -:   80:	// ----------- TEST 3: choice1 = 3 = trash two cards --------------
        -:   81:
        1:   82:	printf("TEST 3: choice1 = 3 = trash two cards\n");
        1:   83:	choice1 = 3;
        -:   84:
        -:   85:	// cycle through each eligible combination of 2 cards to trash
        5:   86:	for (i=1; i<G.handCount[thisPlayer]; i++) {
       10:   87:		for (j=i+1; j<G.handCount[thisPlayer]; j++) {
        -:   88:
        6:   89:			G.hand[thisPlayer][0] = steward;
        6:   90:			G.hand[thisPlayer][1] = copper;
        6:   91:			G.hand[thisPlayer][2] = duchy;
        6:   92:			G.hand[thisPlayer][3] = estate;
        6:   93:			G.hand[thisPlayer][4] = feast;
        -:   94:
        -:   95:			// copy the game state to a test case
        6:   96:			memcpy(&testG, &G, sizeof(struct gameState));
        -:   97:
        6:   98:			printf("starting cards: ");
       36:   99:			for (m=0; m<testG.handCount[thisPlayer]; m++) {
       30:  100:				printf("(%d)", testG.hand[thisPlayer][m]);
        -:  101:			}
        6:  102:			printf("; ");
        -:  103:
        6:  104:			choice2 = j;
        6:  105:			choice3 = i;
        6:  106:			remove1 = testG.hand[thisPlayer][i];
        6:  107:			remove2 = testG.hand[thisPlayer][j];
        6:  108:			cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  109:
        6:  110:			printf("removed: (%d)(%d); ", remove1, remove2);
        6:  111:			printf("ending cards: ");
        -:  112:
        -:  113:			// tests that the removed cards are no longer in the player's hand
       18:  114:			for (m=0; m<testG.handCount[thisPlayer]; m++) {
       12:  115:				printf("(%d)", testG.hand[thisPlayer][m]);
       12:  116:				assert(testG.hand[thisPlayer][m] != remove1);
       12:  117:				assert(testG.hand[thisPlayer][m] != remove2);
        -:  118:			}
        6:  119:			printf(", expected: ");
       30:  120:			for (m=1; m<G.handCount[thisPlayer]; m++) {
       24:  121:				if (G.hand[thisPlayer][m] != G.hand[thisPlayer][i] && G.hand[thisPlayer][m] != G.hand[thisPlayer][j]) {
       12:  122:					printf("(%d)", G.hand[thisPlayer][m]);
        -:  123:				}
        -:  124:			}
        6:  125:			printf("\n");
        -:  126:
        -:  127:			// tests for the appropriate number of remaining cards
        6:  128:			newCards = 0;
        6:  129:			xtraCoins = 0;
        6:  130:			discarded = 3;
        6:  131:			if (i==1 && j==2) {
        1:  132:				printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:  133:				printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:  134:			}
        6:  135:			assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        6:  136:			assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:  137:		}
        -:  138:
        -:  139:	}
        -:  140:
        1:  141:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:  142:
        -:  143:
        1:  144:	return 0;
        -:  145:}
        -:  146:
        -:  147:
